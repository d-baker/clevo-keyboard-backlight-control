#! /bin/bash
set -o nounset


rootdir="/home/dbaker/bin/kb-utility" # TODO fix this
tdir="$rootdir/kb-templates" # template folder

# Array search function
containsElement () {
  local e match="$1"
  shift
  for e; do [[ "$e" == "$match" ]] && return 0; done
  return 1
}

# Process options
while getopts "nd:" opt; do
    case $opt in
        n)  # Create a new colorscheme
            printf "> Creating new colorscheme...\n\n"
            printf "Available colors:\n"
            
            declare -A colors
            colors=(['r']='red' ['b']='blue' ['y']='yellow' ['m']='magenta' ['c']='cyan' ['g']='green' ['w']='white')
            
            for color in "${!colors[@]}"
            do
                echo "$color) ${colors[$color]}"
            done
            
            read -p "Select color for keyboard section 1: " color1
            while ! containsElement $color1 ${!colors[@]}; do
                echo "Invalid option, try again"
                read -p "Select color for keyboard section 1: " color1
            done
            echo "Using $color1 for first section"
            
            read -p "Select color for keyboard section 2: " color2
            echo "Using $color2 for second section"
            
            read -p "Select color for keyboard section 3: " color3
            echo "Using $color3 for third section"
            ;;
        d)  # Set a default colorscheme
            if [ -f "$tdir/${OPTARG}.txt" ]; then
                printf "> Setting default colorscheme to ${OPTARG}...\n\n"
                template="$tdir/${OPTARG}.txt"
                cp $template "$rootdir/default.txt"
                echo "New default colorscheme set"
            else
                printf "Sorry, that colorscheme doesn't exist. Try one of these:\n\n"
                for template in $tdir/*; do
                    stripped=${template%.*}
                    echo ${stripped##*/}
                done
                exit
            fi
            ;;
    esac
done

