#! /bin/bash
set -o nounset


rootdir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
tdir="$rootdir/kb-templates" # template folder

# Array search function
containsElement () {
  local e match="$1"
  shift
  for e; do [[ "$e" == "$match" ]] && return 0; done
  return 1
}

# Check if new colorscheme is a solid color
solidColor () {
    if [ "$1" == "$2" -a "$2" == "$3" ];
    then
        return 0
    fi
    return 1
}

showOptions () {
    printf "Usage:\n"
    printf "  kbsetcolor <colorscheme>    Apply an existing colorscheme\n"
    printf "  kbsetcolor -n    Create a new colorscheme\n"
    printf "  kbsetcolor -d <colorscheme>    Set a default colorscheme\n"
    printf "  kbsetcolor -h    View this help screen\n"
}

applyColorscheme () {
    # Check if requested colorscheme file exists
    if [ -f "$tdir/$1.txt" ]
    then
        printf "> Changing colors...\n"
        cat "$tdir/$1.txt" > "$rootdir/state.txt" # Overwrite state file with chosen color scheme
        echo "> Turning on keyboard backlight..."
        # Concatenate color state with ON code
        cat "$rootdir/kb-on.txt" "$rootdir/state.txt" | sudo tee /etc/modprobe.d/clevo-xsm-wmi.conf > /dev/null
        sudo modprobe -r clevo_xsm_wmi
        sudo modprobe clevo_xsm_wmi
        printf "\nKeyboard backlight turned on, color changed and state saved\n"
    else
        printf "Sorry, that colorscheme doesn't exist. Try one of these:\n\n"
        for template in $tdir/*; do
            stripped=${template%.*}
            echo ${stripped##*/}
        done
    fi
}

# Process options
while getopts ":hnd:" opt; do
    case $opt in
        n)  # Create a new colorscheme
            printf "> Creating new colorscheme...\n\n"
            printf "Available colors:\n"
            
            declare -A colors
            colors=(['r']='red' ['b']='blue' ['y']='yellow' ['m']='magenta' ['c']='cyan' ['g']='green' ['w']='white')
            
            for color in "${!colors[@]}"
            do
                echo "$color) ${colors[$color]}"
            done
            
            read -p "Select color for keyboard section 1: " color1
            while ! containsElement "$color1" ${!colors[@]}; do
                echo "Invalid option, try again"
                read -p "Select color for keyboard section 1: " color1
            done
            printf "\nUsing $color1 for first section\n"
            
            read -p "Select color for keyboard section 2: " color2
            while ! containsElement "$color2" ${!colors[@]}; do
                echo "Invalid option, try again"
                read -p "Select color for keyboard section 2: " color1
            done
            printf "\nUsing $color2 for second section\n"
            
            read -p "Select color for keyboard section 3: " color3
            while ! containsElement "$color3" ${!colors[@]}; do
                echo "Invalid option, try again"
                read -p "Select color for keyboard section 3: " color1
            done
            printf "\nUsing $color3 for third section\n"

            config_string="options clevo_xsm_wmi kb_color=${colors[$color1]},${colors[$color2]},${colors[$color3]}"

            # TODO allow user to specify name
            colorscheme_name=$color1$color2$color3
            # If the colorscheme is a solid color, use a more readable template filename
            if solidColor $color1 $color2 $color3;
            then
                colorscheme_name=${colors[$color1]}
            fi
            template_filename="$tdir/$colorscheme_name.txt"

            # Create and write to the colorscheme file
            echo "$config_string" > "$template_filename"

            read -p "Apply this colorscheme now? y/n: " usenow
            if [ "$usenow" == "y" ]; then
                printf "New colorscheme created and applied. Colorscheme name: $colorscheme_name\n\n"
                applyColorscheme $colorscheme_name
            else
                printf "\nNew colorscheme created, but not applied. You can apply it later using:\nkbsetcolor $colorscheme_name\n"
            fi
            exit
            ;;
        d)  # Set a default colorscheme
            if [ -f "$tdir/${OPTARG}.txt" ]; then
                printf "> Setting default colorscheme to ${OPTARG}...\n\n"
                template="$tdir/${OPTARG}.txt"
                cp $template "$rootdir/default.txt"
                echo "New default colorscheme set"
            else
                printf "Sorry, that colorscheme doesn't exist. Try one of these:\n\n"
                for template in $tdir/*; do
                    stripped=${template%.*}
                    echo ${stripped##*/}
                done
            fi
            exit
            ;;
        h)  # Show help
            showOptions
            exit
            ;;
        *)  # On getopts error...
            showOptions
            exit
            ;;
    esac
done

# Apply existing colorscheme or exit with help menu
if [ $# -eq 0 ]
then
    showOptions
else
    # Argument (that isn't an option) supplied? Try and use it
    applyColorscheme $1
fi
